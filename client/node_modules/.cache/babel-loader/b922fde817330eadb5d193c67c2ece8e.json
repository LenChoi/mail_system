{"ast":null,"code":"var _jsxFileName = \"/home/home/github/mail_system/client/src/pages/test.js\";\nimport React, { Component } from \"react\";\nimport { Button, Dimmer, Loader } from \"semantic-ui-react\";\nimport { post } from \"axios\";\n\nclass Pass extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getMail = () => {\n      const url = \"/api/getonemail\";\n      const formData = new FormData();\n      formData.append(\"address\", this.props.match.params.address);\n      formData.append(\"index\", this.props.match.params.index);\n      const config = {\n        headers: {\n          \"content-type\": \"multipart/form-data\"\n        }\n      };\n      post(url, formData, config).then(res => {\n        const data = res.data;\n        this.props.history.push(\"/mail/\" + this.props.match.params.address + \"/mailInform\", {\n          data\n        }); //console.log(this.props.history);\n      });\n    };\n\n    window.addEventListener(\"load\", () => {\n      if (typeof web3 !== \"undefined\") {\n        // Use Mist/MetaMask's provider\n        const web3js = new Web3(web3.currentProvider);\n      } else {\n        console.log(\"No web3? You should consider trying MetaMask!\"); // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n\n        const web3js = new Web3(new Web3.providers.HttpProvider(\"http://localhost:8545\"));\n      }\n\n      this.getMail();\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Dimmer, {\n      active: true,\n      inverted: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Loader, {\n      inverted: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }\n    }, \"Loading\"));\n  }\n\n}\n\nexport default Pass;","map":{"version":3,"sources":["/home/home/github/mail_system/client/src/pages/test.js"],"names":["React","Component","Button","Dimmer","Loader","post","Pass","constructor","props","getMail","url","formData","FormData","append","match","params","address","index","config","headers","then","res","data","history","push","window","addEventListener","web3","web3js","Web3","currentProvider","console","log","providers","HttpProvider","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,MAAjB,EAAyBC,MAAzB,QAAuC,mBAAvC;AACA,SAASC,IAAT,QAAqB,OAArB;;AAEA,MAAMC,IAAN,SAAmBL,SAAnB,CAA6B;AAqB3BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SApBnBC,OAoBmB,GApBT,MAAM;AACd,YAAMC,GAAG,GAAG,iBAAZ;AACA,YAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,MAAAA,QAAQ,CAACE,MAAT,CAAgB,SAAhB,EAA2B,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBC,OAAnD;AACAL,MAAAA,QAAQ,CAACE,MAAT,CAAgB,OAAhB,EAAyB,KAAKL,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBE,KAAjD;AACA,YAAMC,MAAM,GAAG;AACbC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT;AADI,OAAf;AAKAd,MAAAA,IAAI,CAACK,GAAD,EAAMC,QAAN,EAAgBO,MAAhB,CAAJ,CAA4BE,IAA5B,CAAiCC,GAAG,IAAI;AACtC,cAAMC,IAAI,GAAGD,GAAG,CAACC,IAAjB;AACA,aAAKd,KAAL,CAAWe,OAAX,CAAmBC,IAAnB,CACE,WAAW,KAAKhB,KAAL,CAAWM,KAAX,CAAiBC,MAAjB,CAAwBC,OAAnC,GAA6C,aAD/C,EAEE;AAAEM,UAAAA;AAAF,SAFF,EAFsC,CAMtC;AACD,OAPD;AAQD,KAEkB;;AAEjBG,IAAAA,MAAM,CAACC,gBAAP,CAAwB,MAAxB,EAAgC,MAAM;AACpC,UAAI,OAAOC,IAAP,KAAgB,WAApB,EAAiC;AAC/B;AACA,cAAMC,MAAM,GAAG,IAAIC,IAAJ,CAASF,IAAI,CAACG,eAAd,CAAf;AACD,OAHD,MAGO;AACLC,QAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ,EADK,CAEL;;AACA,cAAMJ,MAAM,GAAG,IAAIC,IAAJ,CACb,IAAIA,IAAI,CAACI,SAAL,CAAeC,YAAnB,CAAgC,uBAAhC,CADa,CAAf;AAGD;;AACD,WAAKzB,OAAL;AACD,KAZD;AAaD;;AAED0B,EAAAA,MAAM,GAAG;AACP,wBACE,oBAAC,MAAD;AAAQ,MAAA,MAAM,MAAd;AAAe,MAAA,QAAQ,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,MAAD;AAAQ,MAAA,QAAQ,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CADF;AAKD;;AA5C0B;;AA+C7B,eAAe7B,IAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Button, Dimmer, Loader } from \"semantic-ui-react\";\nimport { post } from \"axios\";\n\nclass Pass extends Component {\n  getMail = () => {\n    const url = \"/api/getonemail\";\n    const formData = new FormData();\n    formData.append(\"address\", this.props.match.params.address);\n    formData.append(\"index\", this.props.match.params.index);\n    const config = {\n      headers: {\n        \"content-type\": \"multipart/form-data\"\n      }\n    };\n    post(url, formData, config).then(res => {\n      const data = res.data;\n      this.props.history.push(\n        \"/mail/\" + this.props.match.params.address + \"/mailInform\",\n        { data }\n      );\n      //console.log(this.props.history);\n    });\n  };\n\n  constructor(props) {\n    super(props);\n    window.addEventListener(\"load\", () => {\n      if (typeof web3 !== \"undefined\") {\n        // Use Mist/MetaMask's provider\n        const web3js = new Web3(web3.currentProvider);\n      } else {\n        console.log(\"No web3? You should consider trying MetaMask!\");\n        // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n        const web3js = new Web3(\n          new Web3.providers.HttpProvider(\"http://localhost:8545\")\n        );\n      }\n      this.getMail();\n    });\n  }\n\n  render() {\n    return (\n      <Dimmer active inverted>\n        <Loader inverted>Loading</Loader>\n      </Dimmer>\n    );\n  }\n}\n\nexport default Pass;\n"]},"metadata":{},"sourceType":"module"}